// <auto-generated/>
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Quiche
{

    internal static unsafe class NativeMethodsGroupingExtensions
    {
        #region Quiche.Config(37)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int LoadCertChainFromPemFile(this ref global::Quiche.Config @config, byte* @path)
        {
            return NativeMethods.quiche_config_load_cert_chain_from_pem_file((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int LoadPrivKeyFromPemFile(this ref global::Quiche.Config @config, byte* @path)
        {
            return NativeMethods.quiche_config_load_priv_key_from_pem_file((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int LoadVerifyLocationsFromFile(this ref global::Quiche.Config @config, byte* @path)
        {
            return NativeMethods.quiche_config_load_verify_locations_from_file((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int LoadVerifyLocationsFromDirectory(this ref global::Quiche.Config @config, byte* @path)
        {
            return NativeMethods.quiche_config_load_verify_locations_from_directory((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void VerifyPeer(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_verify_peer((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Grease(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_grease((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DiscoverPmtu(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_discover_pmtu((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void LogKeys(this ref global::Quiche.Config @config)
        {
            NativeMethods.quiche_config_log_keys((global::Quiche.Config*)Unsafe.AsPointer(ref @config));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void EnableEarlyData(this ref global::Quiche.Config @config)
        {
            NativeMethods.quiche_config_enable_early_data((global::Quiche.Config*)Unsafe.AsPointer(ref @config));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int SetApplicationProtos(this ref global::Quiche.Config @config, byte* @protos, nuint @protos_len)
        {
            return NativeMethods.quiche_config_set_application_protos((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @protos, @protos_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxAmplificationFactor(this ref global::Quiche.Config @config, nuint @v)
        {
            NativeMethods.quiche_config_set_max_amplification_factor((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxIdleTimeout(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_max_idle_timeout((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxRecvUdpPayloadSize(this ref global::Quiche.Config @config, nuint @v)
        {
            NativeMethods.quiche_config_set_max_recv_udp_payload_size((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxSendUdpPayloadSize(this ref global::Quiche.Config @config, nuint @v)
        {
            NativeMethods.quiche_config_set_max_send_udp_payload_size((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialMaxData(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_initial_max_data((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialMaxStreamDataBidiLocal(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_initial_max_stream_data_bidi_local((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialMaxStreamDataBidiRemote(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_initial_max_stream_data_bidi_remote((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialMaxStreamDataUni(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_initial_max_stream_data_uni((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialMaxStreamsBidi(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_initial_max_streams_bidi((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialMaxStreamsUni(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_initial_max_streams_uni((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetAckDelayExponent(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_ack_delay_exponent((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxAckDelay(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_max_ack_delay((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetDisableActiveMigration(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_set_disable_active_migration((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int SetCcAlgorithmName(this ref global::Quiche.Config @config, byte* @algo)
        {
            return NativeMethods.quiche_config_set_cc_algorithm_name((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @algo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetInitialCongestionWindowPackets(this ref global::Quiche.Config @config, nuint @packets)
        {
            NativeMethods.quiche_config_set_initial_congestion_window_packets((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @packets);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetCcAlgorithm(this ref global::Quiche.Config @config, int @algo)
        {
            NativeMethods.quiche_config_set_cc_algorithm((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @algo);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void EnableHystart(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_enable_hystart((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void EnablePacing(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_enable_pacing((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxPacingRate(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_max_pacing_rate((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void EnableDgram(this ref global::Quiche.Config @config, bool @enabled, nuint @recv_queue_len, nuint @send_queue_len)
        {
            NativeMethods.quiche_config_enable_dgram((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @enabled, @recv_queue_len, @send_queue_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxConnectionWindow(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_max_connection_window((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxStreamWindow(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_max_stream_window((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetActiveConnectionIdLimit(this ref global::Quiche.Config @config, ulong @v)
        {
            NativeMethods.quiche_config_set_active_connection_id_limit((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetStatelessResetToken(this ref global::Quiche.Config @config, byte* @v)
        {
            NativeMethods.quiche_config_set_stateless_reset_token((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetDisableDcidReuse(this ref global::Quiche.Config @config, bool @v)
        {
            NativeMethods.quiche_config_set_disable_dcid_reuse((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int SetTicketKey(this ref global::Quiche.Config @config, byte* @key, nuint @key_len)
        {
            return NativeMethods.quiche_config_set_ticket_key((global::Quiche.Config*)Unsafe.AsPointer(ref @config), @key, @key_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.Config @config)
        {
            NativeMethods.quiche_config_free((global::Quiche.Config*)Unsafe.AsPointer(ref @config));
        }

        #endregion

        #region Quiche.Conn(74)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool SetKeylogPath(this ref global::Quiche.Conn @conn, byte* @path)
        {
            return NativeMethods.quiche_conn_set_keylog_path((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @path);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int SetSession(this ref global::Quiche.Conn @conn, byte* @buf, nuint @buf_len)
        {
            return NativeMethods.quiche_conn_set_session((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @buf, @buf_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint Recv(this ref global::Quiche.Conn @conn, byte* @buf, nuint @buf_len, global::Quiche.RecvInfo* @info)
        {
            return NativeMethods.quiche_conn_recv((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @buf, @buf_len, @info);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint Send(this ref global::Quiche.Conn @conn, byte* @out, nuint @out_len, global::Quiche.SendInfo* @out_info)
        {
            return NativeMethods.quiche_conn_send((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len, @out_info);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint SendQuantum(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_send_quantum((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint SendOnPath(this ref global::Quiche.Conn @conn, byte* @out, nuint @out_len, global::Quiche.sockaddr* @from, int @from_len, global::Quiche.sockaddr* @to, int @to_len, global::Quiche.SendInfo* @out_info)
        {
            return NativeMethods.quiche_conn_send_on_path((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len, @from, @from_len, @to, @to_len, @out_info);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint SendQuantumOnPath(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @local_addr, int @local_len, global::Quiche.sockaddr* @peer_addr, int @peer_len)
        {
            return NativeMethods.quiche_conn_send_quantum_on_path((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @local_addr, @local_len, @peer_addr, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint StreamRecv(this ref global::Quiche.Conn @conn, ulong @stream_id, byte* @out, nuint @buf_len, bool* @fin, ulong* @out_error_code)
        {
            return NativeMethods.quiche_conn_stream_recv((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id, @out, @buf_len, @fin, @out_error_code);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint StreamSend(this ref global::Quiche.Conn @conn, ulong @stream_id, byte* @buf, nuint @buf_len, bool @fin, ulong* @out_error_code)
        {
            return NativeMethods.quiche_conn_stream_send((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id, @buf, @buf_len, @fin, @out_error_code);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int StreamPriority(this ref global::Quiche.Conn @conn, ulong @stream_id, byte @urgency, bool @incremental)
        {
            return NativeMethods.quiche_conn_stream_priority((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id, @urgency, @incremental);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int StreamShutdown(this ref global::Quiche.Conn @conn, ulong @stream_id, int @direction, ulong @err)
        {
            return NativeMethods.quiche_conn_stream_shutdown((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id, @direction, @err);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint StreamCapacity(this ref global::Quiche.Conn @conn, ulong @stream_id)
        {
            return NativeMethods.quiche_conn_stream_capacity((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool StreamReadable(this ref global::Quiche.Conn @conn, ulong @stream_id)
        {
            return NativeMethods.quiche_conn_stream_readable((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long StreamReadableNext(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_stream_readable_next((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int StreamWritable(this ref global::Quiche.Conn @conn, ulong @stream_id, nuint @len)
        {
            return NativeMethods.quiche_conn_stream_writable((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id, @len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long StreamWritableNext(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_stream_writable_next((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool StreamFinished(this ref global::Quiche.Conn @conn, ulong @stream_id)
        {
            return NativeMethods.quiche_conn_stream_finished((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @stream_id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Quiche.StreamIter* Readable(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_readable((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Quiche.StreamIter* Writable(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_writable((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint MaxSendUdpPayloadSize(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_max_send_udp_payload_size((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong TimeoutAsNanos(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_timeout_as_nanos((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong TimeoutAsMillis(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_timeout_as_millis((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void OnTimeout(this ref global::Quiche.Conn @conn)
        {
            NativeMethods.quiche_conn_on_timeout((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Close(this ref global::Quiche.Conn @conn, bool @app, ulong @err, byte* @reason, nuint @reason_len)
        {
            return NativeMethods.quiche_conn_close((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @app, @err, @reason, @reason_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void TraceId(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            NativeMethods.quiche_conn_trace_id((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SourceId(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            NativeMethods.quiche_conn_source_id((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Quiche.ConnIdIter* SourceIds(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_source_ids((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DestinationId(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            NativeMethods.quiche_conn_destination_id((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ApplicationProto(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            NativeMethods.quiche_conn_application_proto((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void PeerCert(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            NativeMethods.quiche_conn_peer_cert((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Session(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            NativeMethods.quiche_conn_session((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsEstablished(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_established((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsResumed(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_resumed((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsInEarlyData(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_in_early_data((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsReadable(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_readable((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsDraining(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_draining((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong PeerStreamsLeftBidi(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_peer_streams_left_bidi((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong PeerStreamsLeftUni(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_peer_streams_left_uni((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsClosed(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_closed((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsTimedOut(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_timed_out((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool PeerError(this ref global::Quiche.Conn @conn, bool* @is_app, ulong* @error_code, byte** @reason, nuint* @reason_len)
        {
            return NativeMethods.quiche_conn_peer_error((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @is_app, @error_code, @reason, @reason_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool LocalError(this ref global::Quiche.Conn @conn, bool* @is_app, ulong* @error_code, byte** @reason, nuint* @reason_len)
        {
            return NativeMethods.quiche_conn_local_error((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @is_app, @error_code, @reason, @reason_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Stats(this ref global::Quiche.Conn @conn, global::Quiche.Stats* @out)
        {
            NativeMethods.quiche_conn_stats((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool PeerTransportParams(this ref global::Quiche.Conn @conn, global::Quiche.TransportParams* @out)
        {
            return NativeMethods.quiche_conn_peer_transport_params((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int PathStats(this ref global::Quiche.Conn @conn, nuint @idx, global::Quiche.PathStats* @out)
        {
            return NativeMethods.quiche_conn_path_stats((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @idx, @out);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsServer(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_server((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramMaxWritableLen(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_dgram_max_writable_len((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramRecvFrontLen(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_dgram_recv_front_len((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramRecvQueueLen(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_dgram_recv_queue_len((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramRecvQueueByteSize(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_dgram_recv_queue_byte_size((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramSendQueueLen(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_dgram_send_queue_len((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramSendQueueByteSize(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_dgram_send_queue_byte_size((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramRecv(this ref global::Quiche.Conn @conn, byte* @buf, nuint @buf_len)
        {
            return NativeMethods.quiche_conn_dgram_recv((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @buf, @buf_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint DgramSend(this ref global::Quiche.Conn @conn, byte* @buf, nuint @buf_len)
        {
            return NativeMethods.quiche_conn_dgram_send((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @buf, @buf_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DgramPurgeOutgoing(this ref global::Quiche.Conn @conn, delegate* unmanaged[Cdecl]<byte*, nuint, bool> @f)
        {
            NativeMethods.quiche_conn_dgram_purge_outgoing((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @f);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsDgramSendQueueFull(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_dgram_send_queue_full((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsDgramRecvQueueFull(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_is_dgram_recv_queue_full((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint SendAckEliciting(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_send_ack_eliciting((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint SendAckElicitingOnPath(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @local, int @local_len, global::Quiche.sockaddr* @peer, int @peer_len)
        {
            return NativeMethods.quiche_conn_send_ack_eliciting_on_path((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool RetiredScidNext(this ref global::Quiche.Conn @conn, byte** @out, nuint* @out_len)
        {
            return NativeMethods.quiche_conn_retired_scid_next((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint RetiredScids(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_retired_scids((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint AvailableDcids(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_available_dcids((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint ScidsLeft(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_scids_left((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nuint ActiveScids(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_active_scids((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int NewScid(this ref global::Quiche.Conn @conn, byte* @scid, nuint @scid_len, byte* @reset_token, bool @retire_if_needed, ulong* @scid_seq)
        {
            return NativeMethods.quiche_conn_new_scid((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @scid, @scid_len, @reset_token, @retire_if_needed, @scid_seq);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ProbePath(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @local, int @local_len, global::Quiche.sockaddr* @peer, int @peer_len, ulong* @seq)
        {
            return NativeMethods.quiche_conn_probe_path((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @local, @local_len, @peer, @peer_len, @seq);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int MigrateSource(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @local, int @local_len, ulong* @seq)
        {
            return NativeMethods.quiche_conn_migrate_source((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @local, @local_len, @seq);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Migrate(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @local, int @local_len, global::Quiche.sockaddr* @peer, int @peer_len, ulong* @seq)
        {
            return NativeMethods.quiche_conn_migrate((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @local, @local_len, @peer, @peer_len, @seq);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Quiche.PathEvent* PathEventNext(this ref global::Quiche.Conn @conn)
        {
            return NativeMethods.quiche_conn_path_event_next((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int RetireDcid(this ref global::Quiche.Conn @conn, ulong @dcid_seq)
        {
            return NativeMethods.quiche_conn_retire_dcid((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @dcid_seq);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Quiche.SocketAddrIter* PathsIter(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @from, nuint @from_len)
        {
            return NativeMethods.quiche_conn_paths_iter((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @from, @from_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int IsPathValidated(this ref global::Quiche.Conn @conn, global::Quiche.sockaddr* @from, nuint @from_len, global::Quiche.sockaddr* @to, nuint @to_len)
        {
            return NativeMethods.quiche_conn_is_path_validated((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn), @from, @from_len, @to, @to_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.Conn @conn)
        {
            NativeMethods.quiche_conn_free((global::Quiche.Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static global::Quiche.H3Conn* NewWithTransport(this ref global::Quiche.Conn @quiche_conn, global::Quiche.H3Config* @config)
        {
            return NativeMethods.quiche_h3_conn_new_with_transport((global::Quiche.Conn*)Unsafe.AsPointer(ref @quiche_conn), @config);
        }

        #endregion

        #region Quiche.ConnIdIter(2)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool QuicheConnectionIdIterNext(this ref global::Quiche.ConnIdIter @iter, byte** @out, nuint* @out_len)
        {
            return NativeMethods.quiche_connection_id_iter_next((global::Quiche.ConnIdIter*)Unsafe.AsPointer(ref @iter), @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void QuicheConnectionIdIterFree(this ref global::Quiche.ConnIdIter @iter)
        {
            NativeMethods.quiche_connection_id_iter_free((global::Quiche.ConnIdIter*)Unsafe.AsPointer(ref @iter));
        }

        #endregion

        #region Quiche.StreamIter(2)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Next(this ref global::Quiche.StreamIter @iter, ulong* @stream_id)
        {
            return NativeMethods.quiche_stream_iter_next((global::Quiche.StreamIter*)Unsafe.AsPointer(ref @iter), @stream_id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.StreamIter @iter)
        {
            NativeMethods.quiche_stream_iter_free((global::Quiche.StreamIter*)Unsafe.AsPointer(ref @iter));
        }

        #endregion

        #region Quiche.PathEvent(8)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Type(this ref global::Quiche.PathEvent @ev)
        {
            return NativeMethods.quiche_path_event_type((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void New(this ref global::Quiche.PathEvent @ev, global::Quiche.sockaddr_storage* @local, int* @local_len, global::Quiche.sockaddr_storage* @peer, int* @peer_len)
        {
            NativeMethods.quiche_path_event_new((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev), @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Validated(this ref global::Quiche.PathEvent @ev, global::Quiche.sockaddr_storage* @local, int* @local_len, global::Quiche.sockaddr_storage* @peer, int* @peer_len)
        {
            NativeMethods.quiche_path_event_validated((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev), @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void FailedValidation(this ref global::Quiche.PathEvent @ev, global::Quiche.sockaddr_storage* @local, int* @local_len, global::Quiche.sockaddr_storage* @peer, int* @peer_len)
        {
            NativeMethods.quiche_path_event_failed_validation((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev), @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Closed(this ref global::Quiche.PathEvent @ev, global::Quiche.sockaddr_storage* @local, int* @local_len, global::Quiche.sockaddr_storage* @peer, int* @peer_len)
        {
            NativeMethods.quiche_path_event_closed((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev), @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ReusedSourceConnectionId(this ref global::Quiche.PathEvent @ev, ulong* @id, global::Quiche.sockaddr_storage* @old_local, int* @old_local_len, global::Quiche.sockaddr_storage* @old_peer, int* @old_peer_len, global::Quiche.sockaddr_storage* @local, int* @local_len, global::Quiche.sockaddr_storage* @peer, int* @peer_len)
        {
            NativeMethods.quiche_path_event_reused_source_connection_id((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev), @id, @old_local, @old_local_len, @old_peer, @old_peer_len, @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void PeerMigrated(this ref global::Quiche.PathEvent @ev, global::Quiche.sockaddr_storage* @local, int* @local_len, global::Quiche.sockaddr_storage* @peer, int* @peer_len)
        {
            NativeMethods.quiche_path_event_peer_migrated((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev), @local, @local_len, @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.PathEvent @ev)
        {
            NativeMethods.quiche_path_event_free((global::Quiche.PathEvent*)Unsafe.AsPointer(ref @ev));
        }

        #endregion

        #region Quiche.SocketAddrIter(2)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Next(this ref global::Quiche.SocketAddrIter @iter, global::Quiche.sockaddr_storage* @peer, nuint* @peer_len)
        {
            return NativeMethods.quiche_socket_addr_iter_next((global::Quiche.SocketAddrIter*)Unsafe.AsPointer(ref @iter), @peer, @peer_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.SocketAddrIter @iter)
        {
            NativeMethods.quiche_socket_addr_iter_free((global::Quiche.SocketAddrIter*)Unsafe.AsPointer(ref @iter));
        }

        #endregion

        #region Quiche.H3Config(5)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetMaxFieldSectionSize(this ref global::Quiche.H3Config @config, ulong @v)
        {
            NativeMethods.quiche_h3_config_set_max_field_section_size((global::Quiche.H3Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetQpackMaxTableCapacity(this ref global::Quiche.H3Config @config, ulong @v)
        {
            NativeMethods.quiche_h3_config_set_qpack_max_table_capacity((global::Quiche.H3Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetQpackBlockedStreams(this ref global::Quiche.H3Config @config, ulong @v)
        {
            NativeMethods.quiche_h3_config_set_qpack_blocked_streams((global::Quiche.H3Config*)Unsafe.AsPointer(ref @config), @v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void EnableExtendedConnect(this ref global::Quiche.H3Config @config, bool @enabled)
        {
            NativeMethods.quiche_h3_config_enable_extended_connect((global::Quiche.H3Config*)Unsafe.AsPointer(ref @config), @enabled);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.H3Config @config)
        {
            NativeMethods.quiche_h3_config_free((global::Quiche.H3Config*)Unsafe.AsPointer(ref @config));
        }

        #endregion

        #region Quiche.H3Conn(13)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Poll(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, global::Quiche.H3Event** @ev)
        {
            return NativeMethods.quiche_h3_conn_poll((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @ev);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int QuicheH3ForEachSetting(this ref global::Quiche.H3Conn @conn, delegate* unmanaged[Cdecl]<ulong, ulong, void*, int> @cb, void* @argp)
        {
            return NativeMethods.quiche_h3_for_each_setting((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @cb, @argp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool QuicheH3ExtendedConnectEnabledByPeer(this ref global::Quiche.H3Conn @conn)
        {
            return NativeMethods.quiche_h3_extended_connect_enabled_by_peer((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long QuicheH3SendRequest(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, global::Quiche.H3Header* @headers, nuint @headers_len, bool @fin)
        {
            return NativeMethods.quiche_h3_send_request((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @headers, @headers_len, @fin);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int QuicheH3SendResponse(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, ulong @stream_id, global::Quiche.H3Header* @headers, nuint @headers_len, bool @fin)
        {
            return NativeMethods.quiche_h3_send_response((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @stream_id, @headers, @headers_len, @fin);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int QuicheH3SendResponseWithPriority(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, ulong @stream_id, global::Quiche.H3Header* @headers, nuint @headers_len, global::Quiche.H3Priority* @priority, bool @fin)
        {
            return NativeMethods.quiche_h3_send_response_with_priority((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @stream_id, @headers, @headers_len, @priority, @fin);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint QuicheH3SendBody(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, ulong @stream_id, byte* @body, nuint @body_len, bool @fin)
        {
            return NativeMethods.quiche_h3_send_body((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @stream_id, @body, @body_len, @fin);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static nint QuicheH3RecvBody(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, ulong @stream_id, byte* @out, nuint @out_len)
        {
            return NativeMethods.quiche_h3_recv_body((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @stream_id, @out, @out_len);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int QuicheH3SendGoaway(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, ulong @id)
        {
            return NativeMethods.quiche_h3_send_goaway((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @id);
        }

        /// <summary>      Sends a PRIORITY_UPDATE frame on the control stream with specified      request stream ID and priority.     </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int QuicheH3SendPriorityUpdateForRequest(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn, ulong @stream_id, global::Quiche.H3Priority* @priority)
        {
            return NativeMethods.quiche_h3_send_priority_update_for_request((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn, @stream_id, @priority);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int QuicheH3TakeLastPriorityUpdate(this ref global::Quiche.H3Conn @conn, ulong @prioritized_element_id, delegate* unmanaged[Cdecl]<byte*, ulong, void*, int> @cb, void* @argp)
        {
            return NativeMethods.quiche_h3_take_last_priority_update((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @prioritized_element_id, @cb, @argp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool QuicheH3DgramEnabledByPeer(this ref global::Quiche.H3Conn @conn, global::Quiche.Conn* @quic_conn)
        {
            return NativeMethods.quiche_h3_dgram_enabled_by_peer((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn), @quic_conn);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.H3Conn @conn)
        {
            NativeMethods.quiche_h3_conn_free((global::Quiche.H3Conn*)Unsafe.AsPointer(ref @conn));
        }

        #endregion

        #region Quiche.H3Event(4)

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Type(this ref global::Quiche.H3Event @ev)
        {
            return NativeMethods.quiche_h3_event_type((global::Quiche.H3Event*)Unsafe.AsPointer(ref @ev));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ForEachHeader(this ref global::Quiche.H3Event @ev, delegate* unmanaged[Cdecl]<byte*, nuint, byte*, nuint, void*, int> @cb, void* @argp)
        {
            return NativeMethods.quiche_h3_event_for_each_header((global::Quiche.H3Event*)Unsafe.AsPointer(ref @ev), @cb, @argp);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool HeadersHasBody(this ref global::Quiche.H3Event @ev)
        {
            return NativeMethods.quiche_h3_event_headers_has_body((global::Quiche.H3Event*)Unsafe.AsPointer(ref @ev));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Free(this ref global::Quiche.H3Event @ev)
        {
            NativeMethods.quiche_h3_event_free((global::Quiche.H3Event*)Unsafe.AsPointer(ref @ev));
        }

        #endregion

    }
}
